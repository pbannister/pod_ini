// Generated date: Mon May  5 07:56:10 2025
// Do not edit this file.
#include "config-declare.h"
#include "pod/pod-racer.h"

struct configuration_pod_t::context_o : public pod_racer::configuration_context_o {};

configuration_pod_t::~configuration_pod_t() {
    delete p_context;
}
 
bool configuration_pod_t::pod_load(const char* filename) {
    p_context = new context_o();
    if (!p_context->pod_load(filename)) {
        return false;
    }
    {
        auto p_section = p_context->tree.section_find("foo");
        if (p_section) {
            configuration_pod.s_foo.v_bar = base_hash::value_find(p_section, "bar", configuration_pod.s_foo.v_bar);
            configuration_pod.s_foo.v_zot = base_hash::value_find(p_section, "zot", configuration_pod.s_foo.v_zot);
        }
    }
    {
        auto p_section = p_context->tree.section_find("panic");
        if (p_section) {
            configuration_pod.s_panic.v_when = base_hash::value_find(p_section, "when", configuration_pod.s_panic.v_when);
        }
    }
    {
        auto p_section = p_context->tree.section_find("us_bannister_reader");
        if (p_section) {
            configuration_pod.s_us_bannister_reader.v_application = base_hash::value_find(p_section, "application", configuration_pod.s_us_bannister_reader.v_application);
            configuration_pod.s_us_bannister_reader.v_service = base_hash::value_find(p_section, "service", configuration_pod.s_us_bannister_reader.v_service);
            configuration_pod.s_us_bannister_reader.v_version = base_hash::value_find(p_section, "version", configuration_pod.s_us_bannister_reader.v_version);
        }
    }
    {
        auto p_section = p_context->tree.section_find("us_bannister_reader_tinyrss");
        if (p_section) {
            configuration_pod.s_us_bannister_reader_tinyrss.v_application = base_hash::value_find(p_section, "application", configuration_pod.s_us_bannister_reader_tinyrss.v_application);
            configuration_pod.s_us_bannister_reader_tinyrss.v_service = base_hash::value_find(p_section, "service", configuration_pod.s_us_bannister_reader_tinyrss.v_service);
            configuration_pod.s_us_bannister_reader_tinyrss.v_version = base_hash::value_find(p_section, "version", configuration_pod.s_us_bannister_reader_tinyrss.v_version);
        }
    }
    {
        auto p_section = p_context->tree.section_find("user");
        if (p_section) {
            configuration_pod.s_user.v_email = base_hash::value_find(p_section, "email", configuration_pod.s_user.v_email);
            configuration_pod.s_user.v_location = base_hash::value_find(p_section, "location", configuration_pod.s_user.v_location);
            configuration_pod.s_user.v_name = base_hash::value_find(p_section, "name", configuration_pod.s_user.v_name);
            configuration_pod.s_user.v_site = base_hash::value_find(p_section, "site", configuration_pod.s_user.v_site);
            configuration_pod.s_user.v_timezone = base_hash::value_find(p_section, "timezone", configuration_pod.s_user.v_timezone);
        }
    }
    return true;
}


bool configuration_pod_t::pod_save(const char *) {
    return false;
}
